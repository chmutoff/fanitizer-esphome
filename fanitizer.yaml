substitutions:
  device_name: fanitizer
  device_description: Rack ventilation system
  friendly_name: Fanitizer

esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: true

preferences:
  flash_write_interval: 60min

logger:

api:
  password: !secret api_password

ota:
  password: !secret ota_password

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  use_address: "192.168.70.249"

  ap:
    ssid: "${friendly_name} AP"
    password: !secret ap_password

captive_portal:

i2c:
  sda: D2
  scl: D1
  scan: false

switch:
  - platform: restart
    name: ${friendly_name} restart

binary_sensor:
  - platform: status
    name: ${friendly_name} HA connection status

text_sensor:
  - platform: version
    name: ${friendly_name} ESPHome Version
    hide_timestamp: true

status_led:
  pin: 
    number: D0
    inverted: false

sensor:
  - platform: wifi_signal
    id: wifi_sig
    name: ${friendly_name} signal
    update_interval: 60s
    
  - platform: uptime
    name: ${friendly_name} uptime
    filters:
      - lambda: "return x / 3600;"
    unit_of_measurement: "hours"
    accuracy_decimals: 2

  - platform: pulse_counter
    id: in_pulses
    pin:
      number: D5
      inverted: false
      mode: INPUT_PULLUP
    name: ${friendly_name} intake Fan Speed
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: 30s

  - platform: pulse_counter
    id: ex_pulses
    pin:
      number: D7
      inverted: false
      mode: INPUT_PULLUP
    name: ${friendly_name} exhaust Fan Speed
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: 30s

  - platform: bme280
    temperature:
      id: temp
      name: "${friendly_name} temperature"
      oversampling: 16x
    pressure:
      name: "${friendly_name} pressure"
    humidity:
      id: hum
      name: "${friendly_name} humidity"
      oversampling: 16x
    address: 0x76
    update_interval: 30s

output:
  - platform: esp8266_pwm
    pin: D6
    frequency: 25000 Hz    
    id: pwmfan_in

  - platform: esp8266_pwm
    pin: D8
    frequency: 25000 Hz
    id: pwmfan_ex

fan:
  - platform: speed    
    output: pwmfan_in
    name: ${friendly_name} Intake Fan    

  - platform: speed
    output: pwmfan_ex
    name: ${friendly_name} Exhaust Fan

font:
  - file: "OpenSans-Regular.ttf"
    id: osr
    size: 12
  - file: "OpenSans-Bold.ttf"
    id: osb
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    update_interval: 30s
    address: 0x3C
    lambda: |-
      it.print(0, 0, id(osr), "${friendly_name}");
      it.printf(it.get_width(), 0, id(osr), TextAlign::TOP_RIGHT, "%.0fdBm", id(wifi_sig).state);
      it.line(0, 15, it.get_width(), 15);
      it.printf(0, 16, id(osb), "T: %.1fÂ°", id(temp).state);
      it.printf(60, 16, id(osb), "H: %.1f%%", id(hum).state);
      it.printf(0, 40, id(osb), "I: %.0f", id(in_pulses).state);
      it.printf(60, 40, id(osb), "O: %.0f", id(ex_pulses).state);
